# coding: utf-8

"""
    Foxhole WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from warapi.models.server_connection_info import ServerConnectionInfo
from typing import Optional, Set
from typing_extensions import Self

class ShardStatus(BaseModel):
    """
    ShardStatus
    """ # noqa: E501
    b_show_colonial_queue_warning: Optional[StrictBool] = Field(default=None, alias="bShowColonialQueueWarning")
    b_show_warden_queue_warning: Optional[StrictBool] = Field(default=None, alias="bShowWardenQueueWarning")
    normalized_global_population: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="normalizedGlobalPopulation")
    server_connection_info_list: Optional[List[ServerConnectionInfo]] = Field(default=None, alias="serverConnectionInfoList")
    war_id: Optional[StrictStr] = Field(default=None, alias="warId")
    squad_max_size: Optional[StrictInt] = Field(default=None, alias="squadMaxSize")
    seconds_to_pre_conquest: Optional[StrictInt] = Field(default=None, alias="secondsToPreConquest")
    b_is_pre_conquest: Optional[StrictBool] = Field(default=None, alias="bIsPreConquest")
    b_is_vip_mode: Optional[StrictBool] = Field(default=None, alias="bIsVIPMode")
    __properties: ClassVar[List[str]] = ["bShowColonialQueueWarning", "bShowWardenQueueWarning", "normalizedGlobalPopulation", "serverConnectionInfoList", "warId", "squadMaxSize", "secondsToPreConquest", "bIsPreConquest", "bIsVIPMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShardStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in server_connection_info_list (list)
        _items = []
        if self.server_connection_info_list:
            for _item_server_connection_info_list in self.server_connection_info_list:
                if _item_server_connection_info_list:
                    _items.append(_item_server_connection_info_list.to_dict())
            _dict['serverConnectionInfoList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShardStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bShowColonialQueueWarning": obj.get("bShowColonialQueueWarning"),
            "bShowWardenQueueWarning": obj.get("bShowWardenQueueWarning"),
            "normalizedGlobalPopulation": obj.get("normalizedGlobalPopulation"),
            "serverConnectionInfoList": [ServerConnectionInfo.from_dict(_item) for _item in obj["serverConnectionInfoList"]] if obj.get("serverConnectionInfoList") is not None else None,
            "warId": obj.get("warId"),
            "squadMaxSize": obj.get("squadMaxSize"),
            "secondsToPreConquest": obj.get("secondsToPreConquest"),
            "bIsPreConquest": obj.get("bIsPreConquest"),
            "bIsVIPMode": obj.get("bIsVIPMode")
        })
        return _obj


