# coding: utf-8

"""
    Foxhole WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ServerConnectionInfo(BaseModel):
    """
    ServerConnectionInfo
    """ # noqa: E501
    current_map: Optional[StrictStr] = Field(default=None, alias="currentMap")
    steam_id: Optional[StrictStr] = Field(default=None, alias="steamId")
    ip_address: Optional[StrictStr] = Field(default=None, alias="ipAddress")
    port: Optional[StrictInt] = None
    beacon_port: Optional[StrictInt] = Field(default=None, alias="beaconPort")
    packed_war_status: Optional[StrictInt] = Field(default=None, alias="packedWarStatus")
    packed_server_state: Optional[StrictInt] = Field(default=None, alias="packedServerState")
    colonial_queue_size: Optional[StrictInt] = Field(default=None, alias="colonialQueueSize")
    warden_queue_size: Optional[StrictInt] = Field(default=None, alias="wardenQueueSize")
    name: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    server_type: Optional[StrictInt] = Field(default=None, alias="serverType")
    map_id: Optional[StrictInt] = Field(default=None, alias="mapId")
    open_colonial_slots: Optional[StrictInt] = Field(default=None, alias="openColonialSlots")
    open_warden_slots: Optional[StrictInt] = Field(default=None, alias="openWardenSlots")
    free_disk_space_in_mb: Optional[StrictInt] = Field(default=None, alias="freeDiskSpaceInMb")
    total_disk_space_in_mb: Optional[StrictInt] = Field(default=None, alias="totalDiskSpaceInMb")
    __properties: ClassVar[List[str]] = ["currentMap", "steamId", "ipAddress", "port", "beaconPort", "packedWarStatus", "packedServerState", "colonialQueueSize", "wardenQueueSize", "name", "version", "serverType", "mapId", "openColonialSlots", "openWardenSlots", "freeDiskSpaceInMb", "totalDiskSpaceInMb"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerConnectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerConnectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentMap": obj.get("currentMap"),
            "steamId": obj.get("steamId"),
            "ipAddress": obj.get("ipAddress"),
            "port": obj.get("port"),
            "beaconPort": obj.get("beaconPort"),
            "packedWarStatus": obj.get("packedWarStatus"),
            "packedServerState": obj.get("packedServerState"),
            "colonialQueueSize": obj.get("colonialQueueSize"),
            "wardenQueueSize": obj.get("wardenQueueSize"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "serverType": obj.get("serverType"),
            "mapId": obj.get("mapId"),
            "openColonialSlots": obj.get("openColonialSlots"),
            "openWardenSlots": obj.get("openWardenSlots"),
            "freeDiskSpaceInMb": obj.get("freeDiskSpaceInMb"),
            "totalDiskSpaceInMb": obj.get("totalDiskSpaceInMb")
        })
        return _obj


