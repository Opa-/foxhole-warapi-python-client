# coding: utf-8

"""
    WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from warapi_client.api_client import ApiClient


class MapsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_map_dynamic(self, map_name, **kwargs):  # noqa: E501
        """Dynamic map data includes map icons that could change over the lifecycle of a map. This includes static bases and static base build sites.  # noqa: E501

        <p>Team-specific data and forward bases are excluded.</p><i>This data may update every 3 seconds.</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_map_dynamic(map_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_name: Name of the map (required)
        :param ComponentsheadersIfNoneMatch if_none_match:
        :return: Map
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_map_dynamic_with_http_info(map_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_map_dynamic_with_http_info(map_name, **kwargs)  # noqa: E501
            return data

    def get_map_dynamic_with_http_info(self, map_name, **kwargs):  # noqa: E501
        """Dynamic map data includes map icons that could change over the lifecycle of a map. This includes static bases and static base build sites.  # noqa: E501

        <p>Team-specific data and forward bases are excluded.</p><i>This data may update every 3 seconds.</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_map_dynamic_with_http_info(map_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_name: Name of the map (required)
        :param ComponentsheadersIfNoneMatch if_none_match:
        :return: Map
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_name', 'if_none_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_map_dynamic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_name' is set
        if ('map_name' not in params or
                params['map_name'] is None):
            raise ValueError("Missing the required parameter `map_name` when calling `get_map_dynamic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_name' in params:
            path_params['mapName'] = params['map_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/worldconquest/maps/{mapName}/dynamic/public', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Map',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_map_static(self, map_name, **kwargs):  # noqa: E501
        """Static map data includes things that never change over the lifecycle of a map. This includes map text labels, resource nodes, and world structures.  # noqa: E501

        <p></p><i>You only need to request this once per map between World Conquests.</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_map_static(map_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_name: Name of the map (required)
        :param ComponentsheadersIfNoneMatch if_none_match:
        :return: Map
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_map_static_with_http_info(map_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_map_static_with_http_info(map_name, **kwargs)  # noqa: E501
            return data

    def get_map_static_with_http_info(self, map_name, **kwargs):  # noqa: E501
        """Static map data includes things that never change over the lifecycle of a map. This includes map text labels, resource nodes, and world structures.  # noqa: E501

        <p></p><i>You only need to request this once per map between World Conquests.</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_map_static_with_http_info(map_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_name: Name of the map (required)
        :param ComponentsheadersIfNoneMatch if_none_match:
        :return: Map
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_name', 'if_none_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_map_static" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_name' is set
        if ('map_name' not in params or
                params['map_name'] is None):
            raise ValueError("Missing the required parameter `map_name` when calling `get_map_static`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_name' in params:
            path_params['mapName'] = params['map_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/worldconquest/maps/{mapName}/static', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Map',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_maps(self, **kwargs):  # noqa: E501
        """Returns a list of the active World Conquest map names.  # noqa: E501

        <p>Note: The maps HomeRegionC and HomeRegionW are returned here, but do not have map data available in this version.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_maps(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_maps_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_maps_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_maps_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of the active World Conquest map names.  # noqa: E501

        <p>Note: The maps HomeRegionC and HomeRegionW are returned here, but do not have map data available in this version.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_maps_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_maps" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/worldconquest/maps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_war_report(self, map_name, **kwargs):  # noqa: E501
        """Returns the number of enlistments, casualties, and other map specific information.  # noqa: E501

        <p></p><i>This data may update every 3 seconds.</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_war_report(map_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_name: Name of the map (required)
        :param ComponentsheadersIfNoneMatch if_none_match:
        :return: WarReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_war_report_with_http_info(map_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_war_report_with_http_info(map_name, **kwargs)  # noqa: E501
            return data

    def get_war_report_with_http_info(self, map_name, **kwargs):  # noqa: E501
        """Returns the number of enlistments, casualties, and other map specific information.  # noqa: E501

        <p></p><i>This data may update every 3 seconds.</i>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_war_report_with_http_info(map_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_name: Name of the map (required)
        :param ComponentsheadersIfNoneMatch if_none_match:
        :return: WarReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_name', 'if_none_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_war_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_name' is set
        if ('map_name' not in params or
                params['map_name'] is None):
            raise ValueError("Missing the required parameter `map_name` when calling `get_war_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_name' in params:
            path_params['mapName'] = params['map_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/worldconquest/warReport/{mapName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WarReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
