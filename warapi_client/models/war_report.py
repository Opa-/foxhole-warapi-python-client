# coding: utf-8

"""
    WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WarReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_enlistments': 'int',
        'colonial_casualties': 'int',
        'warden_casualties': 'int',
        'day_of_war': 'int'
    }

    attribute_map = {
        'total_enlistments': 'totalEnlistments',
        'colonial_casualties': 'colonialCasualties',
        'warden_casualties': 'wardenCasualties',
        'day_of_war': 'dayOfWar'
    }

    def __init__(self, total_enlistments=None, colonial_casualties=None, warden_casualties=None, day_of_war=None):  # noqa: E501
        """WarReport - a model defined in Swagger"""  # noqa: E501
        self._total_enlistments = None
        self._colonial_casualties = None
        self._warden_casualties = None
        self._day_of_war = None
        self.discriminator = None
        if total_enlistments is not None:
            self.total_enlistments = total_enlistments
        if colonial_casualties is not None:
            self.colonial_casualties = colonial_casualties
        if warden_casualties is not None:
            self.warden_casualties = warden_casualties
        if day_of_war is not None:
            self.day_of_war = day_of_war

    @property
    def total_enlistments(self):
        """Gets the total_enlistments of this WarReport.  # noqa: E501


        :return: The total_enlistments of this WarReport.  # noqa: E501
        :rtype: int
        """
        return self._total_enlistments

    @total_enlistments.setter
    def total_enlistments(self, total_enlistments):
        """Sets the total_enlistments of this WarReport.


        :param total_enlistments: The total_enlistments of this WarReport.  # noqa: E501
        :type: int
        """

        self._total_enlistments = total_enlistments

    @property
    def colonial_casualties(self):
        """Gets the colonial_casualties of this WarReport.  # noqa: E501


        :return: The colonial_casualties of this WarReport.  # noqa: E501
        :rtype: int
        """
        return self._colonial_casualties

    @colonial_casualties.setter
    def colonial_casualties(self, colonial_casualties):
        """Sets the colonial_casualties of this WarReport.


        :param colonial_casualties: The colonial_casualties of this WarReport.  # noqa: E501
        :type: int
        """

        self._colonial_casualties = colonial_casualties

    @property
    def warden_casualties(self):
        """Gets the warden_casualties of this WarReport.  # noqa: E501


        :return: The warden_casualties of this WarReport.  # noqa: E501
        :rtype: int
        """
        return self._warden_casualties

    @warden_casualties.setter
    def warden_casualties(self, warden_casualties):
        """Sets the warden_casualties of this WarReport.


        :param warden_casualties: The warden_casualties of this WarReport.  # noqa: E501
        :type: int
        """

        self._warden_casualties = warden_casualties

    @property
    def day_of_war(self):
        """Gets the day_of_war of this WarReport.  # noqa: E501


        :return: The day_of_war of this WarReport.  # noqa: E501
        :rtype: int
        """
        return self._day_of_war

    @day_of_war.setter
    def day_of_war(self, day_of_war):
        """Sets the day_of_war of this WarReport.


        :param day_of_war: The day_of_war of this WarReport.  # noqa: E501
        :type: int
        """

        self._day_of_war = day_of_war

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WarReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
