# coding: utf-8

"""
    WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class War(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'war_id': 'str',
        'war_number': 'int',
        'winner': 'FactionEnum',
        'conquest_start_time': 'int',
        'conquest_end_time': 'int',
        'resistance_start_time': 'int',
        'required_victory_towns': 'int'
    }

    attribute_map = {
        'war_id': 'warId',
        'war_number': 'warNumber',
        'winner': 'winner',
        'conquest_start_time': 'conquestStartTime',
        'conquest_end_time': 'conquestEndTime',
        'resistance_start_time': 'resistanceStartTime',
        'required_victory_towns': 'requiredVictoryTowns'
    }

    def __init__(self, war_id=None, war_number=None, winner=None, conquest_start_time=None, conquest_end_time=None, resistance_start_time=None, required_victory_towns=None):  # noqa: E501
        """War - a model defined in Swagger"""  # noqa: E501
        self._war_id = None
        self._war_number = None
        self._winner = None
        self._conquest_start_time = None
        self._conquest_end_time = None
        self._resistance_start_time = None
        self._required_victory_towns = None
        self.discriminator = None
        if war_id is not None:
            self.war_id = war_id
        if war_number is not None:
            self.war_number = war_number
        if winner is not None:
            self.winner = winner
        if conquest_start_time is not None:
            self.conquest_start_time = conquest_start_time
        if conquest_end_time is not None:
            self.conquest_end_time = conquest_end_time
        if resistance_start_time is not None:
            self.resistance_start_time = resistance_start_time
        if required_victory_towns is not None:
            self.required_victory_towns = required_victory_towns

    @property
    def war_id(self):
        """Gets the war_id of this War.  # noqa: E501


        :return: The war_id of this War.  # noqa: E501
        :rtype: str
        """
        return self._war_id

    @war_id.setter
    def war_id(self, war_id):
        """Sets the war_id of this War.


        :param war_id: The war_id of this War.  # noqa: E501
        :type: str
        """

        self._war_id = war_id

    @property
    def war_number(self):
        """Gets the war_number of this War.  # noqa: E501


        :return: The war_number of this War.  # noqa: E501
        :rtype: int
        """
        return self._war_number

    @war_number.setter
    def war_number(self, war_number):
        """Sets the war_number of this War.


        :param war_number: The war_number of this War.  # noqa: E501
        :type: int
        """

        self._war_number = war_number

    @property
    def winner(self):
        """Gets the winner of this War.  # noqa: E501


        :return: The winner of this War.  # noqa: E501
        :rtype: FactionEnum
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this War.


        :param winner: The winner of this War.  # noqa: E501
        :type: FactionEnum
        """

        self._winner = winner

    @property
    def conquest_start_time(self):
        """Gets the conquest_start_time of this War.  # noqa: E501


        :return: The conquest_start_time of this War.  # noqa: E501
        :rtype: int
        """
        return self._conquest_start_time

    @conquest_start_time.setter
    def conquest_start_time(self, conquest_start_time):
        """Sets the conquest_start_time of this War.


        :param conquest_start_time: The conquest_start_time of this War.  # noqa: E501
        :type: int
        """

        self._conquest_start_time = conquest_start_time

    @property
    def conquest_end_time(self):
        """Gets the conquest_end_time of this War.  # noqa: E501


        :return: The conquest_end_time of this War.  # noqa: E501
        :rtype: int
        """
        return self._conquest_end_time

    @conquest_end_time.setter
    def conquest_end_time(self, conquest_end_time):
        """Sets the conquest_end_time of this War.


        :param conquest_end_time: The conquest_end_time of this War.  # noqa: E501
        :type: int
        """

        self._conquest_end_time = conquest_end_time

    @property
    def resistance_start_time(self):
        """Gets the resistance_start_time of this War.  # noqa: E501


        :return: The resistance_start_time of this War.  # noqa: E501
        :rtype: int
        """
        return self._resistance_start_time

    @resistance_start_time.setter
    def resistance_start_time(self, resistance_start_time):
        """Sets the resistance_start_time of this War.


        :param resistance_start_time: The resistance_start_time of this War.  # noqa: E501
        :type: int
        """

        self._resistance_start_time = resistance_start_time

    @property
    def required_victory_towns(self):
        """Gets the required_victory_towns of this War.  # noqa: E501


        :return: The required_victory_towns of this War.  # noqa: E501
        :rtype: int
        """
        return self._required_victory_towns

    @required_victory_towns.setter
    def required_victory_towns(self, required_victory_towns):
        """Sets the required_victory_towns of this War.


        :param required_victory_towns: The required_victory_towns of this War.  # noqa: E501
        :type: int
        """

        self._required_victory_towns = required_victory_towns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(War, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, War):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
