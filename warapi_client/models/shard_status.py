# coding: utf-8

"""
    WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShardStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'b_show_colonial_queue_warning': 'bool',
        'b_show_warden_queue_warning': 'bool',
        'normalized_global_population': 'float',
        'server_connection_info_list': 'list[ServerConnectionInfo]',
        'war_id': 'str',
        'squad_max_size': 'int',
        'seconds_to_pre_conquest': 'int',
        'b_is_pre_conquest': 'bool',
        'b_is_vip_mode': 'bool'
    }

    attribute_map = {
        'b_show_colonial_queue_warning': 'bShowColonialQueueWarning',
        'b_show_warden_queue_warning': 'bShowWardenQueueWarning',
        'normalized_global_population': 'normalizedGlobalPopulation',
        'server_connection_info_list': 'serverConnectionInfoList',
        'war_id': 'warId',
        'squad_max_size': 'squadMaxSize',
        'seconds_to_pre_conquest': 'secondsToPreConquest',
        'b_is_pre_conquest': 'bIsPreConquest',
        'b_is_vip_mode': 'bIsVIPMode'
    }

    def __init__(self, b_show_colonial_queue_warning=None, b_show_warden_queue_warning=None, normalized_global_population=None, server_connection_info_list=None, war_id=None, squad_max_size=None, seconds_to_pre_conquest=None, b_is_pre_conquest=None, b_is_vip_mode=None):  # noqa: E501
        """ShardStatus - a model defined in Swagger"""  # noqa: E501
        self._b_show_colonial_queue_warning = None
        self._b_show_warden_queue_warning = None
        self._normalized_global_population = None
        self._server_connection_info_list = None
        self._war_id = None
        self._squad_max_size = None
        self._seconds_to_pre_conquest = None
        self._b_is_pre_conquest = None
        self._b_is_vip_mode = None
        self.discriminator = None
        if b_show_colonial_queue_warning is not None:
            self.b_show_colonial_queue_warning = b_show_colonial_queue_warning
        if b_show_warden_queue_warning is not None:
            self.b_show_warden_queue_warning = b_show_warden_queue_warning
        if normalized_global_population is not None:
            self.normalized_global_population = normalized_global_population
        if server_connection_info_list is not None:
            self.server_connection_info_list = server_connection_info_list
        if war_id is not None:
            self.war_id = war_id
        if squad_max_size is not None:
            self.squad_max_size = squad_max_size
        if seconds_to_pre_conquest is not None:
            self.seconds_to_pre_conquest = seconds_to_pre_conquest
        if b_is_pre_conquest is not None:
            self.b_is_pre_conquest = b_is_pre_conquest
        if b_is_vip_mode is not None:
            self.b_is_vip_mode = b_is_vip_mode

    @property
    def b_show_colonial_queue_warning(self):
        """Gets the b_show_colonial_queue_warning of this ShardStatus.  # noqa: E501


        :return: The b_show_colonial_queue_warning of this ShardStatus.  # noqa: E501
        :rtype: bool
        """
        return self._b_show_colonial_queue_warning

    @b_show_colonial_queue_warning.setter
    def b_show_colonial_queue_warning(self, b_show_colonial_queue_warning):
        """Sets the b_show_colonial_queue_warning of this ShardStatus.


        :param b_show_colonial_queue_warning: The b_show_colonial_queue_warning of this ShardStatus.  # noqa: E501
        :type: bool
        """

        self._b_show_colonial_queue_warning = b_show_colonial_queue_warning

    @property
    def b_show_warden_queue_warning(self):
        """Gets the b_show_warden_queue_warning of this ShardStatus.  # noqa: E501


        :return: The b_show_warden_queue_warning of this ShardStatus.  # noqa: E501
        :rtype: bool
        """
        return self._b_show_warden_queue_warning

    @b_show_warden_queue_warning.setter
    def b_show_warden_queue_warning(self, b_show_warden_queue_warning):
        """Sets the b_show_warden_queue_warning of this ShardStatus.


        :param b_show_warden_queue_warning: The b_show_warden_queue_warning of this ShardStatus.  # noqa: E501
        :type: bool
        """

        self._b_show_warden_queue_warning = b_show_warden_queue_warning

    @property
    def normalized_global_population(self):
        """Gets the normalized_global_population of this ShardStatus.  # noqa: E501


        :return: The normalized_global_population of this ShardStatus.  # noqa: E501
        :rtype: float
        """
        return self._normalized_global_population

    @normalized_global_population.setter
    def normalized_global_population(self, normalized_global_population):
        """Sets the normalized_global_population of this ShardStatus.


        :param normalized_global_population: The normalized_global_population of this ShardStatus.  # noqa: E501
        :type: float
        """

        self._normalized_global_population = normalized_global_population

    @property
    def server_connection_info_list(self):
        """Gets the server_connection_info_list of this ShardStatus.  # noqa: E501


        :return: The server_connection_info_list of this ShardStatus.  # noqa: E501
        :rtype: list[ServerConnectionInfo]
        """
        return self._server_connection_info_list

    @server_connection_info_list.setter
    def server_connection_info_list(self, server_connection_info_list):
        """Sets the server_connection_info_list of this ShardStatus.


        :param server_connection_info_list: The server_connection_info_list of this ShardStatus.  # noqa: E501
        :type: list[ServerConnectionInfo]
        """

        self._server_connection_info_list = server_connection_info_list

    @property
    def war_id(self):
        """Gets the war_id of this ShardStatus.  # noqa: E501


        :return: The war_id of this ShardStatus.  # noqa: E501
        :rtype: str
        """
        return self._war_id

    @war_id.setter
    def war_id(self, war_id):
        """Sets the war_id of this ShardStatus.


        :param war_id: The war_id of this ShardStatus.  # noqa: E501
        :type: str
        """

        self._war_id = war_id

    @property
    def squad_max_size(self):
        """Gets the squad_max_size of this ShardStatus.  # noqa: E501


        :return: The squad_max_size of this ShardStatus.  # noqa: E501
        :rtype: int
        """
        return self._squad_max_size

    @squad_max_size.setter
    def squad_max_size(self, squad_max_size):
        """Sets the squad_max_size of this ShardStatus.


        :param squad_max_size: The squad_max_size of this ShardStatus.  # noqa: E501
        :type: int
        """

        self._squad_max_size = squad_max_size

    @property
    def seconds_to_pre_conquest(self):
        """Gets the seconds_to_pre_conquest of this ShardStatus.  # noqa: E501


        :return: The seconds_to_pre_conquest of this ShardStatus.  # noqa: E501
        :rtype: int
        """
        return self._seconds_to_pre_conquest

    @seconds_to_pre_conquest.setter
    def seconds_to_pre_conquest(self, seconds_to_pre_conquest):
        """Sets the seconds_to_pre_conquest of this ShardStatus.


        :param seconds_to_pre_conquest: The seconds_to_pre_conquest of this ShardStatus.  # noqa: E501
        :type: int
        """

        self._seconds_to_pre_conquest = seconds_to_pre_conquest

    @property
    def b_is_pre_conquest(self):
        """Gets the b_is_pre_conquest of this ShardStatus.  # noqa: E501


        :return: The b_is_pre_conquest of this ShardStatus.  # noqa: E501
        :rtype: bool
        """
        return self._b_is_pre_conquest

    @b_is_pre_conquest.setter
    def b_is_pre_conquest(self, b_is_pre_conquest):
        """Sets the b_is_pre_conquest of this ShardStatus.


        :param b_is_pre_conquest: The b_is_pre_conquest of this ShardStatus.  # noqa: E501
        :type: bool
        """

        self._b_is_pre_conquest = b_is_pre_conquest

    @property
    def b_is_vip_mode(self):
        """Gets the b_is_vip_mode of this ShardStatus.  # noqa: E501


        :return: The b_is_vip_mode of this ShardStatus.  # noqa: E501
        :rtype: bool
        """
        return self._b_is_vip_mode

    @b_is_vip_mode.setter
    def b_is_vip_mode(self, b_is_vip_mode):
        """Sets the b_is_vip_mode of this ShardStatus.


        :param b_is_vip_mode: The b_is_vip_mode of this ShardStatus.  # noqa: E501
        :type: bool
        """

        self._b_is_vip_mode = b_is_vip_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShardStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShardStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
