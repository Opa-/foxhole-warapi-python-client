# coding: utf-8

"""
    WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Map(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_id': 'int',
        'scorched_victory_towns': 'int',
        'map_items': 'list[MapItem]',
        'map_items_c': 'list[MapItem]',
        'map_items_w': 'list[MapItem]',
        'map_text_items': 'list[MapTextItems]',
        'last_updated': 'int',
        'version': 'int'
    }

    attribute_map = {
        'region_id': 'regionId',
        'scorched_victory_towns': 'scorchedVictoryTowns',
        'map_items': 'mapItems',
        'map_items_c': 'mapItemsC',
        'map_items_w': 'mapItemsW',
        'map_text_items': 'mapTextItems',
        'last_updated': 'lastUpdated',
        'version': 'version'
    }

    def __init__(self, region_id=None, scorched_victory_towns=None, map_items=None, map_items_c=None, map_items_w=None, map_text_items=None, last_updated=None, version=None):  # noqa: E501
        """Map - a model defined in Swagger"""  # noqa: E501
        self._region_id = None
        self._scorched_victory_towns = None
        self._map_items = None
        self._map_items_c = None
        self._map_items_w = None
        self._map_text_items = None
        self._last_updated = None
        self._version = None
        self.discriminator = None
        if region_id is not None:
            self.region_id = region_id
        if scorched_victory_towns is not None:
            self.scorched_victory_towns = scorched_victory_towns
        if map_items is not None:
            self.map_items = map_items
        if map_items_c is not None:
            self.map_items_c = map_items_c
        if map_items_w is not None:
            self.map_items_w = map_items_w
        if map_text_items is not None:
            self.map_text_items = map_text_items
        if last_updated is not None:
            self.last_updated = last_updated
        if version is not None:
            self.version = version

    @property
    def region_id(self):
        """Gets the region_id of this Map.  # noqa: E501


        :return: The region_id of this Map.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this Map.


        :param region_id: The region_id of this Map.  # noqa: E501
        :type: int
        """

        self._region_id = region_id

    @property
    def scorched_victory_towns(self):
        """Gets the scorched_victory_towns of this Map.  # noqa: E501


        :return: The scorched_victory_towns of this Map.  # noqa: E501
        :rtype: int
        """
        return self._scorched_victory_towns

    @scorched_victory_towns.setter
    def scorched_victory_towns(self, scorched_victory_towns):
        """Sets the scorched_victory_towns of this Map.


        :param scorched_victory_towns: The scorched_victory_towns of this Map.  # noqa: E501
        :type: int
        """

        self._scorched_victory_towns = scorched_victory_towns

    @property
    def map_items(self):
        """Gets the map_items of this Map.  # noqa: E501


        :return: The map_items of this Map.  # noqa: E501
        :rtype: list[MapItem]
        """
        return self._map_items

    @map_items.setter
    def map_items(self, map_items):
        """Sets the map_items of this Map.


        :param map_items: The map_items of this Map.  # noqa: E501
        :type: list[MapItem]
        """

        self._map_items = map_items

    @property
    def map_items_c(self):
        """Gets the map_items_c of this Map.  # noqa: E501


        :return: The map_items_c of this Map.  # noqa: E501
        :rtype: list[MapItem]
        """
        return self._map_items_c

    @map_items_c.setter
    def map_items_c(self, map_items_c):
        """Sets the map_items_c of this Map.


        :param map_items_c: The map_items_c of this Map.  # noqa: E501
        :type: list[MapItem]
        """

        self._map_items_c = map_items_c

    @property
    def map_items_w(self):
        """Gets the map_items_w of this Map.  # noqa: E501


        :return: The map_items_w of this Map.  # noqa: E501
        :rtype: list[MapItem]
        """
        return self._map_items_w

    @map_items_w.setter
    def map_items_w(self, map_items_w):
        """Sets the map_items_w of this Map.


        :param map_items_w: The map_items_w of this Map.  # noqa: E501
        :type: list[MapItem]
        """

        self._map_items_w = map_items_w

    @property
    def map_text_items(self):
        """Gets the map_text_items of this Map.  # noqa: E501


        :return: The map_text_items of this Map.  # noqa: E501
        :rtype: list[MapTextItems]
        """
        return self._map_text_items

    @map_text_items.setter
    def map_text_items(self, map_text_items):
        """Sets the map_text_items of this Map.


        :param map_text_items: The map_text_items of this Map.  # noqa: E501
        :type: list[MapTextItems]
        """

        self._map_text_items = map_text_items

    @property
    def last_updated(self):
        """Gets the last_updated of this Map.  # noqa: E501


        :return: The last_updated of this Map.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Map.


        :param last_updated: The last_updated of this Map.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def version(self):
        """Gets the version of this Map.  # noqa: E501


        :return: The version of this Map.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Map.


        :param version: The version of this Map.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Map, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Map):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
