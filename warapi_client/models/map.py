# coding: utf-8

"""
    WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from warapi_client.models.map_item import MapItem
from warapi_client.models.map_text_items import MapTextItems
from typing import Optional, Set
from typing_extensions import Self

class Map(BaseModel):
    """
    Map
    """ # noqa: E501
    region_id: Optional[StrictInt] = Field(default=None, alias="regionId")
    scorched_victory_towns: Optional[StrictInt] = Field(default=None, alias="scorchedVictoryTowns")
    map_items: Optional[List[MapItem]] = Field(default=None, alias="mapItems")
    map_items_c: Optional[List[MapItem]] = Field(default=None, alias="mapItemsC")
    map_items_w: Optional[List[MapItem]] = Field(default=None, alias="mapItemsW")
    map_text_items: Optional[List[MapTextItems]] = Field(default=None, alias="mapTextItems")
    last_updated: Optional[StrictInt] = Field(default=None, alias="lastUpdated")
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["regionId", "scorchedVictoryTowns", "mapItems", "mapItemsC", "mapItemsW", "mapTextItems", "lastUpdated", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Map from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in map_items (list)
        _items = []
        if self.map_items:
            for _item_map_items in self.map_items:
                if _item_map_items:
                    _items.append(_item_map_items.to_dict())
            _dict['mapItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in map_items_c (list)
        _items = []
        if self.map_items_c:
            for _item_map_items_c in self.map_items_c:
                if _item_map_items_c:
                    _items.append(_item_map_items_c.to_dict())
            _dict['mapItemsC'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in map_items_w (list)
        _items = []
        if self.map_items_w:
            for _item_map_items_w in self.map_items_w:
                if _item_map_items_w:
                    _items.append(_item_map_items_w.to_dict())
            _dict['mapItemsW'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in map_text_items (list)
        _items = []
        if self.map_text_items:
            for _item_map_text_items in self.map_text_items:
                if _item_map_text_items:
                    _items.append(_item_map_text_items.to_dict())
            _dict['mapTextItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Map from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "regionId": obj.get("regionId"),
            "scorchedVictoryTowns": obj.get("scorchedVictoryTowns"),
            "mapItems": [MapItem.from_dict(_item) for _item in obj["mapItems"]] if obj.get("mapItems") is not None else None,
            "mapItemsC": [MapItem.from_dict(_item) for _item in obj["mapItemsC"]] if obj.get("mapItemsC") is not None else None,
            "mapItemsW": [MapItem.from_dict(_item) for _item in obj["mapItemsW"]] if obj.get("mapItemsW") is not None else None,
            "mapTextItems": [MapTextItems.from_dict(_item) for _item in obj["mapTextItems"]] if obj.get("mapTextItems") is not None else None,
            "lastUpdated": obj.get("lastUpdated"),
            "version": obj.get("version")
        })
        return _obj


