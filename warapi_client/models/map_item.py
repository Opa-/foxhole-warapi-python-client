# coding: utf-8

"""
    WarAPI

    The War API allows developers to query information about the state of the current Foxhole World Conquest.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MapItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'FactionEnum',
        'icon_type': 'int',
        'x': 'float',
        'y': 'float',
        'flags': 'int',
        'view_direction': 'int'
    }

    attribute_map = {
        'team_id': 'teamId',
        'icon_type': 'iconType',
        'x': 'x',
        'y': 'y',
        'flags': 'flags',
        'view_direction': 'viewDirection'
    }

    def __init__(self, team_id=None, icon_type=None, x=None, y=None, flags=None, view_direction=None):  # noqa: E501
        """MapItem - a model defined in Swagger"""  # noqa: E501
        self._team_id = None
        self._icon_type = None
        self._x = None
        self._y = None
        self._flags = None
        self._view_direction = None
        self.discriminator = None
        if team_id is not None:
            self.team_id = team_id
        if icon_type is not None:
            self.icon_type = icon_type
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if flags is not None:
            self.flags = flags
        if view_direction is not None:
            self.view_direction = view_direction

    @property
    def team_id(self):
        """Gets the team_id of this MapItem.  # noqa: E501


        :return: The team_id of this MapItem.  # noqa: E501
        :rtype: FactionEnum
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this MapItem.


        :param team_id: The team_id of this MapItem.  # noqa: E501
        :type: FactionEnum
        """

        self._team_id = team_id

    @property
    def icon_type(self):
        """Gets the icon_type of this MapItem.  # noqa: E501


        :return: The icon_type of this MapItem.  # noqa: E501
        :rtype: int
        """
        return self._icon_type

    @icon_type.setter
    def icon_type(self, icon_type):
        """Sets the icon_type of this MapItem.


        :param icon_type: The icon_type of this MapItem.  # noqa: E501
        :type: int
        """

        self._icon_type = icon_type

    @property
    def x(self):
        """Gets the x of this MapItem.  # noqa: E501


        :return: The x of this MapItem.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this MapItem.


        :param x: The x of this MapItem.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this MapItem.  # noqa: E501


        :return: The y of this MapItem.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this MapItem.


        :param y: The y of this MapItem.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def flags(self):
        """Gets the flags of this MapItem.  # noqa: E501


        :return: The flags of this MapItem.  # noqa: E501
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this MapItem.


        :param flags: The flags of this MapItem.  # noqa: E501
        :type: int
        """

        self._flags = flags

    @property
    def view_direction(self):
        """Gets the view_direction of this MapItem.  # noqa: E501


        :return: The view_direction of this MapItem.  # noqa: E501
        :rtype: int
        """
        return self._view_direction

    @view_direction.setter
    def view_direction(self, view_direction):
        """Sets the view_direction of this MapItem.


        :param view_direction: The view_direction of this MapItem.  # noqa: E501
        :type: int
        """

        self._view_direction = view_direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
